\documentclass[article,nojss]{jss}
\DeclareGraphicsExtensions{.pdf,.eps}

\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{longtable}
\usepackage{array}
\setlength{\extrarowheight}{0.1cm}

\newcommand{\noun}[1]{\textsc{#1}}
\newcommand{\aq}{\textbf{\textsf{AquaEnv}}}
\newcommand{\lm}{\textbf{\textsf{minpack.lm}}}
\newcommand{\R}{\proglang{R }}
\newcommand{\ds}{\textbf{\textsf{deSolve}}}

\setkeys{Gin}{width=\textwidth} %width of graphics produced by Sweave

% enumerate and add to table down to subparagraph
\addtocounter{tocdepth}{+3}
\addtocounter{secnumdepth}{+3}


\title{Package \aq: an \noun{Aqua}tic modelling \noun{Env}ironment in \proglang{R}}
\Plaintitle{Package AquaEnv: an Aquatic modelling Environment in R}

\Keywords{aquatic modelling, pH, pH scales, dissolved inorganic carbon, total alkalinity, total alkalinity curve fitting, theoretical titration, revelle factor, omega, solubility products, $\rm CO_2$, ocean acidification, estuaries, carbonate system, seawater, \proglang{R}}

\Plainkeywords{aquatic modelling, pH, pH scales, dissolved inorganic carbon, total alkalinity, total alkalinity curve fitting, theoretical titration, revelle factor, omega, solubility products, CO2, ocean acidification, estuaries, carbonate system, seawater, R}


\author{Andreas F. Hofmann\\
Centre for Estuarine and Marine Ecology\\
Netherlands Institute of Ecology\\
The Netherlands}

\Plainauthor{Andreas F. Hofmann}

\Abstract{ 
\noindent
\aq$\,$ is an integrated development toolbox for aquatic chemical model generation focused on (ocean) acidification and CO2 air-water exchange. 
\begin{itemize}
\item It contains all elements necessary to model the pH, the related CO2 air-water exchange, as well as aquatic acid-base chemistry in general for
an arbitrary marine, estuarine or freshwater system. Also chemical batches can be modelled. 
\item Next to the routines necessary to calculate desired information, \aq$\,$ also contains a suite of tools to visualize this information.
\item Furthermore, \aq$\,$ can not only be used to build dynamic models of aquatic systems, but it can also serve as a simple desktop tool for the 
experimental aquatic chemist to generate and visualize all possible derived information from a set of measurements with one single easy to use R function.
\item Additionally, the sensitivity of the system to variations in the input variables can be visualized.
\item \aq$\,$ also contains a number of example ``applications'' that make use of the aquatic modelling toolbox that \aq$\,$ provides: 
\begin{itemize}
\item a theoretical titration simulator
\item and a routine to determine total alkalinity ([TA]), the total dissolved inorganic carbon concentration ([$\sum$CO2]), 
as well as additionally the electrode standard potential ($\rm E_0$) and the first dissociation constant of the carbonate system ($\rm K^*_{CO_2}$)
\end{itemize}
\end{itemize}
}

\Address{
  Andreas F. Hofmann\\
  Centre for Estuarine and Marine Ecology (CEME)\\
  Netherlands Institute of Ecology (NIOO)\\
  4401 NT Yerseke, Netherlands
  E-mail: \email{a.hofmann@nioo.knaw.nl}\\
  URL: \url{http://www.nioo.knaw.nl/ppages/ahofmann}\\
}



%% need no \usepackage{Sweave}
%\VignetteIndexEntry{AquaEnv}



\begin{document}
\SweaveOpts{engine=R,eps=FALSE}
\SweaveOpts{keep.source=TRUE}

<<preliminaries,echo=FALSE,results=hide>>=
library("AquaEnv")
options(width=70)

@


\maketitle

\clearpage
\tableofcontents
\clearpage

\section{Introduction}

\aq$\,$is a toolbox for aquatic modelling that serves several purposes
\begin{itemize}
\item It provides functions to calculate the stoichiometric equilibrium constants ($\rm K^*$) for key acid base systems in natural seawater, the Henry's constants ($\rm K_0$), 
      as well as the solubility products ($\rm K_{sp}$) for calcite and aragonite. This functionality is provided via the functions 
      \texttt{K\_CO2, K\_HCO3, K\_BOH3, K\_W, K\_HSO4, K\_HF, K\_NH4, K\_H2S, K\_H3PO4, K\_H2PO4, K\_HPO4, K\_SiOH4, K\_SiOOH3, K0\_CO2, K0\_O2, Ksp\_aragonite,} and \\
      \texttt{Ksp\_calcite}.

\item It is designed to make its use as easy as possible: all the information that can be calculated from the set of parameters know of a system or sample
can be obtained by one single function: \texttt{aquaenv}. This function returs a list of class  \textit{aquaenv} that contains next to the input parameters 
\begin{itemize}
\item the clorinity, the ionic strength, $[\rm \sum B(OH)_3]$, $[\rm \sum H_2SO_4]$, $[\rm \sum HF]$, $[\rm Cl^-]$, $[\rm Cl^-]$,$[\rm \sum Br]$, $[\rm Na^+]$, $[\rm Mg^{2+}]$, 
$[\rm Ca^{2+}]$, $[\rm K^{+}]$, $[\rm Sr^{2+}]$ calculated from salinity as given in \cite{DOE1994}
(Please note that if values for $[\rm \sum B(OH)_3]$, $[\rm \sum H_2SO_4]$, $[\rm \sum HF]$ are given as input parameters, these parameters are used and not the ones calculated 
from salinity.)
\item the hydrostatic pressure calculated from the given depth and the seawater density calculated from temperature and salinity as given by \cite{Millero1981}
\item a set of conversion factors to convert between different pH scales \citep{Dickson1984, Zeebe2001} and between mol/kg-$\rm H_2O$ and mol/kg-solution
 (inferred from \cite{Roy1993b} and \cite{DOE1994})
\item the Henry's constants for $\rm CO_2$ \citep{Weiss1974} and for $\rm O_2$ \citep[inferred from][]{Weiss1970} calculated from temperature and salinity as well as the 
associated saturation concentrations of $\rm CO_2$ and $\rm O_2$.
\item the ion product of water \citep{Millero1995}, the stoichiometric equilibrium constants of $\rm HSO_4^-$ \citep{Dickson1990},  $\rm HF$\citep{Dickson1979a} ,
$\rm CO_2$ \citep{Roy1993b}, $\rm HCO_3^-$ \citep{Roy1993b}, $\rm B(OH)_3$ \citep{Dickson1990}, $\rm NH4^+$\citep{Millero1995a}, $\rm H2_S$ \citep{Millero1995},
$\rm H_3PO4$\citep{Millero1995}, $\rm H_2PO4^-$ \citep{Millero1995}, $HPO4^{2-}$ \citep{Millero1995}, $\rm SiOH4$ \citep{Millero1988},         
$\rm SiOOH3^-$ \citep{Wischmeyer2003}, $\rm HNO2$ \citep{Riordan2005}, $\rm HNO3$,  $\rm H2SO4$ \citep{Atkins1996}, $\rm HS$ \citep{Atkins1996} mostly calculated 
as functions of temperature and salinity and pressure corrected according to \cite{Millero1995}.
\item the solubility products of calcite and aragonite \citep{Mucci1983} as well as the associated $\Omega$'s if a full speciation is calculated (see below)
\item the partial pressure of $\rm CO_2$ - if a full speciation is calculated (see below)
\item if $[\rm \sum CO_2]$ and pH are given $[\rm TA]$ is calculated, if $[\rm \sum CO_2]$ and $[\rm TA]$ are given pH is calculated, if $[\rm \sum CO_2]$ and $\rm [CO_2]$ or p$\rm CO_2$
are given, pH and $[\rm TA]$ are calculated.
\item if either one of the pairs pH and  $\rm [CO_2]$ or p$\rm CO_2$, pH and $[\rm TA]$, or $[\rm TA]$ and $\rm [CO_2]$ or p$\rm CO_2$ is given, $[\rm \sum CO_2]$ is calculated
\item if sufficient information is given and the flag \texttt{speciation=TRUE} is set, a full speciation of $[\rm \sum CO2]$, $[\rm \sum NH4]$, $[\rm \sum H_2S]$, $[\rm \sum HNO3]$,  $[\rm \sum HNO2]$,
 $[\rm \sum H_3PO4]$, $[\rm \sum Si(OH)_4]$, $[\rm \sum B(OH)_3]$, $[\rm \sum H_2SO_4]$, $[\rm \sum HF]$, as well as water itself is calculated
\item if the flag \texttt{revelle=TRUE} is set, the revelle factor \citep{Zeebe2001} is calculated.
item if the flag \texttt{revelle=TRUE} is set, all necessary quantities for the explicit ``direct substitution approach'' (DSA) to pH modelling as given in \cite{Hofmann2008} are 
calculated. These are the buffer factor (the partial derivative of $\rm [TA]$ with respect to $\rm [H^+]$) and the partial derivatives of $\rm [TA]$ with respect to the other 
total quantities. Furthermore, the partial derivatives of $\rm [TA]$ with respect to changes in the equilibrium constants ($K^*$), multiplied with the partial derivatives
of the equilibrium constants with respect to their variables needed for the DSA with time variable equilibrium constants as described in \cite{Hofmann2008b} are calculated.
Finally, the ionization fractions as defined by \cite{Stumm1996} and used in \cite{Hofmann2008c} are calculated for the full speciation.
\end{itemize}
\item Input for \texttt{aquaenv} has to be supplied in standard SI units, the free proton pH scale and in molinity\footnote{Note that it is not sufficient to give a gravimetric concentration in 
mol/kg since there is a substancial difference between mol/kg-$\rm H_2O$ (molality) and mol/kg-solution (molinity).} (mol/kg-solution).
Conversion of input parameters to this necessary units and pH scale  can be done with the generic function \texttt{convert}.
\item The information created with aquaenv is also supplied in standard SI units and in molinity. All elements of an object of class \textit{aquaenv} of a certain unit or pH scale
can be converted into other units or pH scales with the function \texttt{convert} as well.
\item One can use input vectors of temperature T, salinity S or depth d for \texttt{aquaenv} to obtain vectors of all calculated information as function of 
the input vector. This can be visualized in a large variety of ways using the \texttt{plot} function specially defined for objects of type \textit{aquaenv}.
\item  Objects of class aquaenv can be used in dynamic models to define the state of the system in each timestep of the numerical integration (done e.g. with \ds).
with the function \texttt{aquaenv} and the flag \texttt{from.data.frame=TRUE} it is possible to convert output of those dynamic models into objects of type
\textit{aquaenv} which allows the user to use the whole suite of visualisation tools that is provided by the function \texttt{plot} in \aq.
\item As mentioned above \cite{Hofmann2008}, \cite{Hofmann2008b}, and \cite{Hofmann2008c} describe methods for an ``explicit'' pH modelling which allows 
for the quantification of the influences of kinetically modelled processes on the pH. Objects of type \textit{aquaenv} provide all needed quantities 
(partial derivatives of $\rm[TA]$, ionization fractions, etc.) to employ both of those methods in dynamic models. 
Furthermore, \aq$\,$provides the functionality to cumulatively plot the obtained influences on the pH.
\item As an example of how to use the toolbox that is \aq, two applications are provided
\begin{itemize}
\item The function \texttt{titration}: creates theoretical titrations which can be used e.g. to create bjerrum plots, something that can also be done with the function \texttt{plot} in \aq.
\item The function \texttt{TAfit}:  a routine based on a method in \cite{DOE1994} that makes use of that theoretical titration function and allows for 
determining  total alkalinity ($\rm [TA]$),  the total dissolved inorganic carbon concentration ([$\sum$CO2]), as well as additionally the electrode standard potential ($\rm E_0$) and the first dissociation 
constant of the carbonate system ($\rm K^*_{CO_2}$) using the Levenberg-Marquart algorithm (least squares optimization procedure) as provided in \lm.
\end{itemize}
\end{itemize}


\section{The elements of an object of class \textit{aquaenv}}
The function \texttt{aquaenv}, the central function of \aq$ $, returns an object of class \textit{aquaenv}. This object is a list of different elements which can be accesses with the \$ character or 
with the [[]] operator
<<fig=FALSE, echo=TRUE>>=
test <- aquaenv(10,35)
test$Tc
test[["Tc"]]
@ 
Maximally, i.e., if the enough input data is supplied to define the pH of the system and the flags \texttt{speciation}, \texttt{dsa}, and \texttt{revelle} are \texttt{TRUE} while the flag
\texttt{skeleton} is \texttt{FALSE}, an object of class \textit{aquaenv} contains the following elements

\begin{footnotesize}
\begin{longtable}{l|l|p{7cm}}
\textbf{element}& \textbf{unit}            & \textbf{explanation} \\ \hline 
Tc          & \textdegree C                & temperature          \\
Tk          & K                            & absolute temperature \\
S           & ``psu'' (no unit)            & salinity             \\
Cl          & \textperthousand             & chlorinity           \\
I           & mol/kg-$\rm H_2O$            & ionic strength       \\
d           & m                            & depth                \\ 
hydroP      & bar                          & hydrostatic pressure \\
density     & kg/$\rm m^3$                 & (seawater) density   \\
SumCO2      & mol/kg-soln                  & $[\rm \sum CO_2]$, total dissolved inorganic carbon concentration \\         
SumNH4      & mol/kg-soln                  & $[\rm \sum NH_4^+]$, total ammonium concentration\\
SumH2S      & mol/kg-soln                  & $[\rm \sum H_2S]$, total sulfide concentration\\
SumHNO3     & mol/kg-soln                  & $[\rm \sum HNO_3]$, total nitrate concentration\\
SumHNO2     & mol/kg-soln                  & $[\rm \sum HNO_2]$, total nitrite concentration\\
SumH3PO4    & mol/kg-soln                  & $[\rm \sum H_3PO_4]$, total phosphate concentration\\
SumSiOH4    & mol/kg-soln                  & $[\rm \sum Si(OH)_4]$, total silicate concentration\\       
SumBOH3     & mol/kg-soln                  & $[\rm \sum B(OH)_3]$, total borates concentration\\
SumH2SO4    & mol/kg-soln                  & $[\rm \sum H_2SO_4]$, total sulfate concentration\\
SumHF       & mol/kg-soln                  & $[\rm \sum HF]$, total fluoride concentration\\
SumBr       & mol/kg-soln                  & $[\rm \sum HBr]$, total bromide concentration\\
ClConc      & mol/kg-soln                  & $[\rm Cl^-]$, chloride concentration\\
Na          & mol/kg-soln                  & $[\rm Na^{+}]$, sodium concentration\\
Mg          & mol/kg-soln                  & $[\rm Mg^{2+}]$, magnesium concentration\\
Ca          & mol/kg-soln                  & $[\rm Ca^{2+}]$, calcium concentration\\
K           & mol/kg-soln                  & $[\rm K^+]$, potassium concentration\\               
Sr          & mol/kg-soln                  & $[\rm Sr^{2+}]$, strontium concentration\\    
molal2molin & (mol/kg-soln)/(mol/kg-H2O)   & concentration conversion factor: from molality to molinity\\
free2tot    & -                            & pH conversion factor: free scale to total scale\\
free2sws    & -                            & pH conversion factor: free scale to sawater scale\\
tot2free    & -                            & pH conversion factor: total scale to free scale\\ 
tot2sws     & -                            & pH conversion factor: total scale to seawater scale\\ 
sws2free    & -                            & pH conversion factor: seawater scale to  free scale\\ 
sws2tot     & -                            & pH conversion factor: seawater scale to total scale\\ 
K0\_CO2     & mol/(kg-soln*atm)            & Henry's constant for $\rm CO_2$\\ 
K0\_O2      & mol/(kg-soln*atm)            & Henry's constant for $\rm O_2$\\ 
CO2\_sat    & mol/kg-soln                  & $\rm CO_2$ saturation concentration at an atmospheric partial pressure/fugacity of Fugacity\$CO2\\
O2\_sat     & mol/kg-soln                  & $\rm O_2$ saturation concentration at an atmospheric partial pressure/fugacity of Fugacity\$O2\\
K\_W        &(mol/kg-soln)$^2$, free pH scale & stoichiometric equilibrium ion product of \\
            &                              & $\rm H_2O$: $\rm K^*_W = [H^+][OH-]$\\
K\_HSO4     &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant \\
            &                              & $\rm K^*_{HSO_4^-} = [H^+][SO_4^{2-}] / [HSO_4^-]$\\
K\_HF       &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{HF} = [H^+][F^{-}] / [HF]$\\
K\_CO2      &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{CO_2} = [H^+][HCO_3^{-}] / [CO_2]$\\
K\_HCO3     &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant \\
            &                                 & $\rm K^*_{HCO_3^{-}} = [H^+][CO_3^{2-}] / [HCO_3^{-}]$\\
K\_BOH3     &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{B(OH)_3} = [H^+][B(OH)_4^-] / [B(OH)_3]$\\          
K\_NH4      &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{NH_4^+} = [H^+][NH_3] / [NH_4^+]$\\
K\_H2S      &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant \\
            &                                 & $\rm K^*_{H_2S} = [H^+][HS^-] / [H_2S]$\\
K\_H3PO4    &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{H_3PO_4} = [H^+][H_2PO_4^-] / [H_3PO_4]$\\         
K\_H2PO4    &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{H_2PO_4^-} = [H^+][HPO_4^{2-}] / [H_2PO_4^-]$\\
K\_HPO4     &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{HPO_4^{2-}} = [H^+][PO_4^{3-}] / [HPO_4^{2-}]$\\
K\_SiOH4    &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{Si(OH)_4} = [H^+][SiO(OH)_3^-] / [Si(OH)_4]$\\         
K\_SiOOH3   &mol/kg-soln,       free pH scale & stoichiometric equilibrium constant\\
            &                                 & $\rm K^*_{SiO(OH)_3^-} = [H^+][SiO_2(OH)_2^{2-}] / [SiO(OH)_3^-]$\\         
K\_HNO2     &mol/kg-soln; mol/kg-H2O; mol/l   & approximate value for equilibrium constant \\
            &                                 & $\rm K^*_{HNO_2} = [H^+][NO_2^-] / [HNO_2]$\\         
K\_HNO3     &mol/kg-soln; mol/kg-H2O; mol/l   & approximate value for equilibrium constant \\
            &                                 & $\rm K^*_{HNO_3} = [H^+][NO_3^-] / [HNO_3]$\\              
K\_H2SO4    &mol/kg-soln; mol/kg-H2O; mol/l   & approximate value for equilibrium constant \\
            &                                 & $\rm K^*_{H_2SO_4} = [H^+][HSO_4^-] / [H_2SO_4]$\\    
K\_HS       & mol/kg-soln; mol/kg-H2O; mol/l  & approximate value for equilibrium constant \\
            &                                 & $\rm K^*_{HS^-} = [H^+][S^{2-}] / [HS^-]$\\
Ksp\_calcite& (mol/kg-soln)$^2$               & stoichiometric equilibrium solubility product of calcite\\
            &                                 & $\rm Ksp^*_{cal} = [Ca^{2+}][CO_3^{2-}]$\\
Ksp\_aragonite &(mol/kg-soln)$^2$             & stoichiometric equilibrium solubility product of aragonite\\
            &                                 & $\rm Ksp^*_{ara} = [Ca^{2+}][CO_3^{2-}]$\\
TA          & mol/kg-soln                     & [TA], total alkalinity\\
pH          & -, free scale                   & pH\\              
pCO2        & atm,                            & partial pressure (~fugacity) of $\rm CO_2$ in the water\\
CO2         & mol/kg-soln                     & $[\rm CO_2]$\\         
HCO3        & mol/kg-soln                     & $[\rm HCO_3^-]$\\         
CO3         & mol/kg-soln                     & $[\rm CO_3^{2-}]$\\         
BOH3        & mol/kg-soln                     & $[\rm B(OH)_3]$\\         
BOH4        & mol/kg-soln                     & $[\rm B(OH)_4^-]$\\                     
OH          & mol/kg-soln                     & $[\rm OH^-]$\\         
H3PO4       & mol/kg-soln                     & $[\rm H_3PO_4]$\\         
H2PO4       & mol/kg-soln                     & $[\rm H2PO_4^-]$\\                    
HPO4        & mol/kg-soln                     & $[\rm HPO_4^{2-}]$\\         
PO4         & mol/kg-soln                     & $[\rm PO_4^{3-}]$\\         
SiOH4       & mol/kg-soln                     & $[\rm Si(OH)_4]$\\                    
SiOOH3      & mol/kg-soln                     & $[\rm SiO(OH)_3^-]$\\         
SiO2OH2     & mol/kg-soln                     & $[\rm SiO_2(OH)_2^{2-}]$\\         
H2S         & mol/kg-soln                     & $[\rm H_2S]$\\                      
HS          & mol/kg-soln                     & $[\rm HS^-]$\\         
S2min       & mol/kg-soln                     & $[\rm S^{2-}]$\\         
NH4         & mol/kg-soln                     & $[\rm NH_4^+]$\\                      
NH3         & mol/kg-soln                     & $[\rm NH_3]$\\         
H2SO4       & mol/kg-soln                     & $[\rm H_2SO_4]$\\         
HSO4        & mol/kg-soln                     & $[\rm HSO_4^-]$\\                     
SO4         & mol/kg-soln                     & $[\rm SO_4^{2-}]$\\         
HF          & mol/kg-soln                     & $[\rm HF]$\\         
F           & mol/kg-soln                     & $[\rm F^-]$\\                        
HNO3        & mol/kg-soln                     & $[\rm HNO_3]$\\
NO3         & mol/kg-soln                     & $[\rm NO_3^-]$\\         
HNO2        & mol/kg-soln                     & $[\rm HNO_2]$\\                     
NO2         & mol/kg-soln                     & $[\rm NO_2^-]$\\         
omega\_calcite   & -                          & saturation state $\Omega$ with respect to calcite\\
omega\_aragonite & -                          & saturation state $\Omega$ with respect to aragonite\\
revelle     & -                               & Revelle factor\\    
c1          & -                               & ionization fraction $c_1 = [\rm CO_2]/[\rm \sum CO_2]$\\
c2          & -                               & ionization fraction $c_2 = [\rm HCO_3^-]/[\rm \sum CO_2]$\\
c3          & -                               & ionization fraction $c_3 = [\rm CO_3^{2-}]/[\rm \sum CO_2]$\\
dTAdSumCO2  & -                               & $\rm \frac{\partial [TA]}{[\partial \sum CO_2]}$\\
            &                                 & with $\rm[TA] = f([H^+], [\sum CO_2], ...)$\\
b1          & -                               & ionization fraction $b_1 = [\rm B(OH)_3]/[\rm \sum B(OH)_3]$\\               
b2          & -                               & ionization fraction $b_2 = [\rm B(OH)_4^-]/[\rm \sum B(OH)_3]$\\               
dTAdSumBOH3 & -                               & $\rm \frac{\partial [TA]}{[\partial \sum B(OH)_3]}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ...)$\\
so1         & -                               & ionization fraction $so_1 = [\rm H_2SO_4]/[\rm \sum H_2SO_4]$\\               
so2         & -                               & ionization fraction $so_2 = [\rm HSO_4^-]/[\rm \sum H_2SO_4]$\\               
so3         & -                               & ionization fraction $so_3 = [\rm SO_4^{2-}]/[\rm \sum H_2SO_4]$\\               
dTAdSumH2SO4& -                               & $\rm \frac{\partial [TA]}{[\partial \sum H_2SO_4]}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ...)$\\   
f1          & -                               & ionization fraction $f_1 = [\rm HF]/[\rm \sum HF]$\\               
f2          & -                               & ionization fraction $f_1 = [\rm F^-]/[\rm \sum HF]$\\               
dTAdSumHF   & -                               & $\rm \frac{\partial [TA]}{[\partial \sum HF]}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ...)$\\        
dTAdH       & -                               & $\rm \frac{\partial [TA]}{[\partial [H^+]}$: buffer factor\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ...)$\\        
dTAdKdKdS   & -                               & $\rm \sum_i \frac{\partial [TA]}{\partial K^*_i} \frac{\partial K^*_i}{\partial S}$\\
            &                                 &  with $\rm [TA] = f([H^+], [\sum CO_2], ..., K^*_i)$\\        
dTAdKdKdT   & -                               & $\rm \sum_i \frac{\partial [TA]}{\partial K^*_i} \frac{\partial K^*_i}{\partial T}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ..., K^*_i)$\\     
dTAdKdKdd   & -                               & $\rm \sum_i \frac{\partial [TA]}{\partial K^*_i} \frac{\partial K^*_i}{\partial d}$\\
            &                                 &  with $\rm [TA] = f([H^+], [\sum CO_2], ..., K^*_i)$\\ 
dTAdKdKdSumH2SO4 & -                          & $\rm \sum_i \frac{\partial [TA]}{\partial K^*_i} \frac{\partial K^*_i}{\partial [\sum H_2SO_4]}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ..., K^*_i)$\\ 
dTAdKdKdSumHF & -                             & $\rm \sum_i \frac{\partial [TA]}{\partial K^*_i} \frac{\partial K^*_i}{\partial [\sum HF]}$\\
            &                                 & with $\rm [TA] = f([H^+], [\sum CO_2], ..., K^*_i)$\\   
\end{longtable}
\end{footnotesize}

For elements that are calculated according to certain literature references, those references are given in appendix \ref{app: references}.

\section{Using \aq}

\subsection{Basic features}

\subsubsection{calling the ``K'' functions directly}
The elements \texttt{K\_CO2, K\_HCO3, K\_BOH3, K\_W, K\_HSO4, K\_HF, K\_NH4, K\_H2S, K\_H3PO4, K\_H2PO4, K\_HPO4, K\_SiOH4, K\_SiOOH3, K0\_CO2, K0\_O2, Ksp\_aragonite,} and \\
\texttt{Ksp\_calcite} can be calculated directly, witout creating an object of class \textit{aquaenv}. This is done via functions that bear the same as those elements

<<fig=FALSE, echo=TRUE>>=
K_CO2(15,30)
K0_CO2(15,30)
Ksp_calcite(15,30,100)
@ 


\subsubsection{Minimal \textit{aquaenv} definition}
Minimally, an object of class \textit{aquaenv} can be defined with just a temperature and salinity value

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30)
ae$K_CO2
@

Optionally, a mean depth can be given. As in the above case, the returned object of class \textit{aquaenv} then contains
a standard set of elements as shown by the \texttt{names} command.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=10)
ae$Ksp_calcite
names(ae)
@ 

A minimal set of elements in an object of class \textit{aquaenv} can be obtained by setting the flag \texttt{skeleton} to \texttt{TRUE}

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=10, skeleton=TRUE)
names(ae)

@ 



\subsubsection{Defining the complete \textit{aquaenv} system in different ways}
If enough information is given to define a complete speciation, i.e. either one of the pairs
SumCO2 and pH, SumCO2 and TA, SumCO2 and CO2, or SumCO2 and pCO2, 
a full \textit{aquaenv} system can be defined.


<<fig=FALSE, echo=TRUE>>=
Tc     <- 15
S      <- 30
d      <- 10
SumCO2 <- 0.0020
pH     <- 8
TA     <- 0.002140323
pCO2   <- 0.000533576
CO2    <- 2.055419e-05

ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH)
ae$TA

ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, TA=TA)
ae$pH

ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, CO2=CO2)
ae$pH

names(ae)

@ 

As seen above, a full speciation is calculated along with the pH or total alkalinity respectively. If only pH or total alkalinity is needed, 
the calculation of the full speciation can be toggled off. Furthermore the flag \texttt{skeleton} also works for a full system.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, speciation=FALSE)
names(ae)

ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, speciation=FALSE, skeleton=TRUE)
names(ae)

@ 

Furtermore all the quantities needed for the explicit pH modelling approaches as given in \cite{Hofmann2008} and \cite{Hofmann2008c} can be calculated by 
setting the flag \texttt{dsa} to \texttt{TRUE}. The revelle factor can be calculated using the flag \texttt{revelle}.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pCO2=pCO2, dsa=TRUE, revelle=TRUE)
ae$dTAdH
ae$revelle
@ 

If an ambivalent situation is created because the user enters too much information, an error message is displayed

\begin{scriptsize}
<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, CO2=CO2, pCO2=pCO2)
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, TA=TA)
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, CO2=CO2)
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, pCO2=pCO2)
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, TA=TA, CO2=CO2)
ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, TA=TA, pCO2=pCO2)
@ 
\end{scriptsize}



\subsubsection{Calculating $\rm [\sum CO_2]$} 


$\rm [\sum CO_2]$ can be calculated by giving a constant pair of either pH and CO2, pH and pCO2, pH and TA, TA and CO2, or TA and pCO2  

<<fig=FALSE, echo=TRUE>>=
pCO2   <- 0.0006952296
CO2    <- 2.678134e-05
pH     <- 7.888569
TA     <- 0.0021

Tc <- 15
S  <- 30
d  <- 10

ae <- aquaenv(Tc, S, d, SumCO2=NULL, pH=pH, CO2=CO2)
ae$SumCO2

ae <- aquaenv(Tc, S, d, SumCO2=NULL, pH=pH, pCO2=pCO2)
ae$SumCO2

ae <- aquaenv(Tc, S, d, SumCO2=NULL, pH=pH, TA=TA)
ae$SumCO2

ae <- aquaenv(Tc, S, d, SumCO2=NULL, TA=TA, CO2=CO2)
ae$SumCO2

ae <- aquaenv(Tc, S, d, SumCO2=NULL, TA=TA, pCO2=pCO2)
ae$SumCO2
@ 



\subsubsection{Cloning an object of class \textit{aquaenv}}

 It is possible to clone an obect of class \textit{aquaenv}, either 1 to 1 or with different pH, TA, or K\_CO2

<<fig=FALSE, echo=TRUE>>=
Tc     <- 15
S      <- 30
SumCO2 <- 0.0020
TA     <- 0.00214

ae <- aquaenv(Tc, S, SumCO2=SumCO2, TA=TA)
ae$pH

ae1 <- aquaenv(ae=ae)
ae1$pH

pH  <- 9
ae2 <- aquaenv(ae=ae, pH=pH)
ae2$TA

TA  <- 0.002
ae3 <- aquaenv(ae=ae, TA=TA)
ae3$pH

K_CO2 <- 1e-6
ae4 <- aquaenv(ae=ae, k_co2=K_CO2)
ae4$pH
@ 

Note that K\_CO2 as an input variable is in lower cases!


\subsubsection{Preparing input variables}
Input variables for the function \texttt{aquaenv} need to be in mol/kg-solution and on the free pH scale. 
Data in other concentration units or pH scales can be converted using the function \texttt{convert}.

<<fig=FALSE, echo=TRUE>>=
Tc <- 15
S  <- 10

pH_NBS      <- 8.142777
SumCO2molar <- 0.002016803

pH_free     <- convert(pH_NBS,      "pHscale", "nbs2free",    Tc=Tc, S=S)
SumCO2molin <- convert(SumCO2molar, "conc",    "molar2molin", Tc=Tc, S=S)

ae <- aquaenv(Tc, S, SumCO2=SumCO2molin, pH=pH_free)
ae$pH
ae$SumCO2
@ 



\subsubsection{Vectors as input variables}
One of the input variables for the function \texttt{aquaenv} may be a vector. All the other input variables are then assumed to be constant.
The elements of the resulting two dimensional object of class \textit{aquaenv} are then vectors containing the elements as a function of the input variable
for which a vector is given.

<<fig=FALSE, echo=TRUE>>=
SumCO2 <- 0.0020
pH     <- 8
Tc     <- 1:15
S      <- 30
d      <- 10

ae <- aquaenv(Tc, S, d, SumCO2=SumCO2, pH=pH, revelle=TRUE)
ae$revelle
@ 

A two dimensional object of class \textit{aquaenv} can be visualized using the \texttt{plot} function. 
For convenience of the user, the default setting for the \texttt{plot} function for an object of class \textit{aquaenv} results in a
new plotting device being opened. Setting the flag \texttt{newdevice} to \texttt{FALSE} prevents that.

\vspace*{-2cm}
<<fig=TRUE, echo=TRUE, width=13, height=10>>=
plot(ae, xval=Tc, xlab="T/(deg C)", newdevice=FALSE)
@ 
\vspace*{-2cm}

The \texttt{plot} function plots all elements of the respective object of class \textit{aquaenv}. This, however, might not be what the user wants,
especially if a larger plotting device cannot properly displayed like in the case above. In this case the parameter \texttt{what} can be used.
Note, however, that the default setting for calling \texttt{plot} with the parameter \texttt{what} is that \texttt{mfrow=c(1,1)}. So
if one wants to plot several elements, \texttt{mfrow} needs to be set to a suitable value.

<<fig=TRUE, echo=TRUE, width=10, height=2>>=
plot(ae, xval=Tc, xlab="T/(deg C)", what=c("pH", "CO2", "HCO3", "CO3"), newdevice=FALSE, mfrow=c(1,4))
@ 


The following chunks  of example code show other possible definitions of objects of class \textit{aquaenv} with vectors as input variables. 
<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=20:30, d=10, SumCO2=SumCO2, pH=pH, dsa=TRUE)
plot(ae, xval=20:30, xlab="S")
@ 

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=seq(1,1000, 100), SumCO2=SumCO2, pH=pH, revelle=TRUE)
plot(ae, xval=seq(1,1000, 100), xlab="depth/m")
@ 

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=1:15, S=30, d=10, SumCO2=SumCO2, TA=0.0023)
plot(ae, xval=1:15, xlab="T/(deg C)")
@ 

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=20:30, d=10, SumCO2=SumCO2, TA=TA)
plot(ae, xval=20:30, xlab="S")
@

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=seq(1,1000, 200), SumCO2=SumCO2, TA=TA, revelle=TRUE, dsa=TRUE)
plot(ae, xval=seq(1,1000, 200), xlab="depth/m")
@ 


Interesting to note is that also, e.g., SumCO2, TA, pH and SumNH4 can be vectors

<<fig=TRUE, echo=TRUE, width=10, height=2>>=
ae <- aquaenv(10,20, SumCO2=seq(0.001,0.002, 0.0001), TA=0.002)
plot(ae, xval=ae$SumCO2, xlab="SumCO2/(mol/kg-soln)", what=c("pH", "CO2", "HCO3", "CO3"), newdevice=FALSE, mfrow=c(1,4))
@ 

<<fig=TRUE, echo=TRUE, width=10, height=2>>=
ae <- aquaenv(10,20, SumCO2=0.002, TA=seq(0.001,0.002, 0.0001))
plot(ae, xval=ae$TA, xlab="TA/(mol/kg-soln)", what=c("pH", "CO2", "HCO3", "CO3"), newdevice=FALSE, mfrow=c(1,4))
@ 

<<fig=TRUE, echo=TRUE, width=10, height=2>>=
ae <- aquaenv(10,20, SumCO2=0.002, pH=seq(8,8.2,0.001)) 
plot(ae, xval=ae$pH, xlab="pH (free scale)", what=c("pH", "CO2", "HCO3", "CO3"), newdevice=FALSE, mfrow=c(1,4))
@ 

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(10,20, SumCO2=0.002, SumNH4=seq(0.0001, 0.0002, 0.00001), pH=8)
ae$NH3
@ 


\subsubsection{Calculating $\rm [\sum CO_2]$ from input vectors}

The functionality of calculating SumCO2 can also be used together with vectors as input variables.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=11:15, S=30,SumCO2=NULL, pH=pH, CO2=CO2, revelle=TRUE, dsa=TRUE)
ae$SumCO2
@ 

Two further examples

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=20:30, SumCO2=NULL, pH=pH, pCO2=pCO2)
plot(ae, xval=20:30, xlab="S")
@ 

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=seq(1,1000, 100), SumCO2=NULL, pH=pH, TA=TA)
plot(ae, xval=seq(1,1000, 100), xlab="depth/m")
@ 



\subsubsection{Conversion from and to a dataframe}
Objects of class \textit{aquaenv} can be converted to an \R \textit{data.frame} to further post-process them with standard
\R means. Similarly, \R \textit{data.frames} can be converted to objects of class \textit{aquaenv} to use the plotting 
facilities that exist for objects of class \textit{aquaenv}. This can be helpful for plotting output of a dynamic model run, e.g. from \R package \ds,
and will be shown later in this document.

<<fig=FALSE, echo=TRUE>>=
aedataframe <- as.data.frame(ae)
aetest      <- aquaenv(ae=aedataframe, from.data.frame=TRUE)
@ 

\subsubsection{Converting  elements in an obect of class \textit{aquaenv}}

Elements of an object of class \textit{aquaenv} are calculated in, e.g., the concentration unit mol/kg-solution (molinity).
The function \texttt{convert} can be used to convert all elements in an object of class \textit{aquaenv} that share a common attribute,
e.g. the unit.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(10,30)
ae$SumBOH3
ae <- convert(ae, "mol/kg-soln", "umol\kg-H2O", 1e6/ae$molal2molin, "unit")
ae$SumBOH3
@ 


\subsubsection{Quantities needed for explicit pH modelling}
As already mentioned above, the quantities needed for the explicit pH modelling approach (direct substitution approach - DSA) as presented by \cite{Hofmann2008}
can be calculated with the function \texttt{aquaenv} by setting the flag \texttt{dsa}.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(Tc=15, S=30, d=10, SumCO2=0.002, pH=8, dsa=TRUE, revelle=TRUE)
@ 

This command calculated the buffer factor and the partial derivatives of [TA] with respect to other summed quantities referred to in \cite{Hofmann2008}

<<fig=FALSE, echo=TRUE>>=
ae$dTAdH
ae$dTAdSumCO2
@ 

as well the sums partial derivatives of [TA] with respect to the equilibrium constants ($K^*$'s) multiplied with the partial derivatives of the respective
equilibrium constant with one of their variables (i.e., S, T, d, SumH2SO4, od SumHF) as introduced in \cite{Hofmann2008b}.

<<fig=FALSE, echo=TRUE>>=
ae$dTAdKdKdS
ae$dTAdKdKdSumH2SO4
@ 

Furthermore the ionization fractions used for the pH dependent fractional stoichiometric pH modelling approach described in \cite{Hofmann2008c} are calculated as well

<<fig=FALSE, echo=TRUE>>=
ae$c1
@ 


\subsection{The \texttt{plot.aquaenv} function}
In the previous sections, the \texttt{plot} function has been introduced. What actually is called if the first element of the arguments list of
\texttt{plot} is an object of type \textit{aquaenv} is the function \texttt{plot.aquaenv}. 
This is a multifunctional tool to visualize information contained in an object of class
\textit{aquaenv}. For the convenience of the users, \texttt{plot.aquaenv} combines the call of standard \R plotting functions and the previous call of the function \texttt{par} 
to set parameters like \texttt{mfrow}, \texttt{mar}, etc. as well as the opening of a plotting device with a certain size. As already shown above, setting
the flag \texttt{newdevice} to \texttt{FALSE} suppresses the opening of a new plotting device (this feature is needed here to create a plot that will be
woven into the \LaTeX$\,$document by Sweave).\\

\noindent
For example
<<fig=TRUE, echo=TRUE, width=10, height=2>>=
ae <- aquaenv(10, 20:30)
plot(ae, xval=20:30, xlab="S", what=c("K_CO2", "K_HCO3", "K_BOH3"), size=c(10,2), mfrow=c(1,3), newdevice=FALSE)
@ 
and
\setkeys{Gin}{width=.2\textwidth} %width of graphics produced by Sweave
<<fig=TRUE, echo=TRUE, width=2, height=5>>=
plot(ae, xval=20:30, xlab="S", what=c("K_CO2", "K_HCO3", "K_BOH3"), size=c(2,10), mfrow=c(3,1), newdevice=FALSE)
@ 
\setkeys{Gin}{width=\textwidth} %width of graphics produced by Sweave

Furthermore the parameter \texttt{device} can be specified which allows the user to write the plots to .eps and .pdf files.
The parameter \texttt{filename} can be used to specify a filename other than the default filename ``aquaenv''.

<<fig=FALSE, echo=TRUE>>=
ae <- aquaenv(10, 20:30)
plot(ae, xval=20:30, xlab="S", what=c("K_CO2", "K_HCO3", "K_BOH3"), size=c(10,2), mfrow=c(1,3), device="pdf", filename="test")
plot(ae, xval=20:30, xlab="S", what=c("K_CO2", "K_HCO3", "K_BOH3"), size=c(2,10), mfrow=c(3,1), device="eps", filename="test")
@ 

These features make the function \texttt{plot.aquaenv} different from standard \R plotting functions.
However, if the flags \texttt{newdevice} and \texttt{setpar} are set to \texttt{FALSE}, \texttt{plot.aquaenv} behaves like a ``normal'' \R plotting function

<<fig=TRUE, echo=TRUE, width=10, height=5>>=
par(mfrow=c(1,2))
plot(ae, xval=20:30, xlab="S", what="K_CO2", lwd=3, col="red", newdevice=FALSE, setpar=FALSE)
plot(ae, xval=20:30, xlab="S", what="K_HCO3", cex=3, type="b", col="blue", newdevice=FALSE, setpar=FALSE)
@ 

Furthermore, the function \texttt{plot.aquaenv} can be used to create ``cumulative'' plots and ``Bjerrum'' plots. This will be explained in some of the following sections.


\subsection{Using objects of class \textit{aquaenv} in dynamic models}

\subsubsection{Ordinary dynamic models}

It is convenient to use objects of class \textit{aquaenv} in a dynamic model, e.g. solved using the \R package \ds.
This can be illustrated with an example. (For information about how to set up a dynamic model with \ds, consult the documentation of \ds).
<<fig=FALSE, echo=TRUE>>=
require(deSolve)
@ 
A list of parameters is specified
<<fig=FALSE, echo=TRUE, keep.source=TRUE>>=
parameters <- list(             
                   S          = 25    , # psu       
                   Tc_min     = 5     , # degrees C
                   Tc_max     = 25    , # degrees C
                   d          = 10    , # m
                   
                   k          = 0.4       , # 1/d	      proportionality factor for air-water exchange
                   rOx        = 0.0000003 , # mol-N/(kg*d)  maximal rate of oxic mineralisation
                   rNitri     = 0.0000002 , # mol-N/(kg*d)  maximal rate of nitrification 
                   rPP        = 0.000006  , # mol-N/(kg*d)  maximal rate of primary production
                   
                   ksDINPP    = 0.000001  , # mol-N/kg
                   ksNH4PP    = 0.000001  , # mol-N/kg
                   
                   D          = 0.1       , #   1/d            (dispersive) transport coefficient
                   
                   O2_io      = 0.000296  , # mol/kg-soln 
                   NO3_io     = 0.000035  , # mol/kg-soln 
                   SumNH4_io  = 0.000008  , # mol/kg-soln 
                   SumCO2_io  = 0.002320  , # mol/kg-soln 
                   TA_io      = 0.002435  , # mol/kg-soln 
                   
                   C_Nratio     = 8       , # mol C/mol N     C:N ratio of organic matter
                   
                   a           = 30       , # timestep from which PP begins     
                   b           = 50       , # timestep where PP shuts off again
                   
                   modeltime   = 100        # duration of the model
                   )
@ 

A model function is defined which will be executed every timestep of the numerical integration. An object of class \textit{aquaenv}
is created in each timestep, some of its elements are used to calculated kinetic rate expressions and the whole object is returned as output.

<<fig=FALSE, echo=TRUE>>=
Waddenzeebox <- function(timestep, currentstate, parameters)
{
  with (
        as.list(c(currentstate,parameters)),
        {
          Tc <- c(seq(Tc_min, Tc_max, (Tc_max-Tc_min)/(modeltime/2)), seq(Tc_max, Tc_min, -(Tc_max-Tc_min)/(modeltime/2)))[[round(timestep)+1]]
          
          ae <- aquaenv(Tc=Tc, S=S, SumCO2=SumCO2, SumNH4=SumNH4, TA=TA)
                                    
          ECO2    <- k * (ae$CO2_sat - ae$CO2)            
          EO2     <- k * (ae$O2_sat  - O2)             
         
          TO2     <- D*(O2_io     - O2)
          TNO3    <- D*(NO3_io    - NO3)
          TSumNH4 <- D*(SumNH4_io - SumNH4)
          TTA     <- D*(TA_io     - TA)
          TSumCO2 <- D*(SumCO2_io - SumCO2)
          
          RNit      <- rNitri 

          ROx       <- rOx 
          ROxCarbon <- ROx * C_Nratio

          pNH4PP <- 0
          RPP <- 0
          
          if ((timestep > a) && (timestep < b))
            {
              RPP    <- rPP * ((SumNH4+NO3)/(ksDINPP + (SumNH4+NO3)))
              pNH4PP <- 1 - (ksNH4PP/(ksNH4PP + SumNH4))
            }
          else
            {
              RPP <- 0
            }
          RPPCarbon <- RPP * C_Nratio
          
          dO2     <- TO2     + EO2 - ROxCarbon - 2*RNit  + (2-2*pNH4PP)*RPP + RPPCarbon
          dNO3    <- TNO3    + RNit -(1-pNH4PP)*RPP

          dSumCO2 <- TSumCO2 + ECO2 + ROxCarbon - RPPCarbon
          dSumNH4 <- TSumNH4 + ROx  - RNit - pNH4PP*RPP
                    
          dTA     <- TTA     + ROx - 2*RNit -(2*pNH4PP-1)*RPP 

          ratesofchanges <- c(dO2, dNO3, dSumNH4, dSumCO2, dTA)
          transport      <- c(TO2=TO2, TNO3=TNO3, TSumNH4=TSumNH4, TTA=TTA, TSumCO2=TSumCO2)
          airseaexchange <- c(ECO2=ECO2, EO2=EO2)
          
          return(list(ratesofchanges, list(transport, airseaexchange, ae)))
        }
        )
}
@ 

The model is solved

<<fig=FALSE, echo=TRUE>>=
with (as.list(parameters),
      {
        initialstate <<- c(O2=O2_io, NO3=NO3_io, SumNH4=SumNH4_io, SumCO2=SumCO2_io, TA=TA_io)
        times        <<- c(0:modeltime)
        output       <<- as.data.frame(vode(initialstate,times,Waddenzeebox,parameters, hmax=1))[-1,]        
      })
@ 

and the output can be plotted in the same way as a two dimensional object of class \textit{aquaenv} by converting it 
to an object of class \textit{aquaenv} using the \texttt{from.data.frame} flag of the function \texttt{aquaenv}
<<fig=TRUE, echo=TRUE, width=13, height=10>>=
plot(aquaenv(ae=output, from.data.frame=TRUE), xval=output$time, xlab="time/d", mfrow=c(10,10), newdevice=FALSE) 
@ 




\subsubsection{Models using the explicit pH modelling approach}

\paragraph{In one single model}

Since an object of class \textit{aquaenv} can contain all quantities necessary to employ the explicit pH modelling approaches as introduced by 
\cite{Hofmann2008, Hofmann2008b, Hofmann2008c}, they can be readily used in an explicit pH model.\\

\noindent
As an example, we give a model that calculates the pH in the ``classical'' way in every timestep using \texttt{aquaenv}, also employs the explicit pH modelling 
approach (direct substitution approach - DSA) given in \cite{Hofmann2008} and additionally employs fractional stoichiometry as given in \cite{Hofmann2008c}.
The pH evolution is thus calculated in three different ways which allows comparing the three values for consistency.\\

\noindent
Again, a list of parameters is defined
<<fig=FALSE, echo=TRUE>>=
parameters <- list(             
                   S          = 25    , # psu       
                   Tc         = 15    , # degrees C
                   d          = 10    , # m
                   
                   k          = 0.4       , # 1/d	    proportionality factor for air-water exchange
                   rOx        = 0.0000003 , # mol-N/(kg*d)  maximal rate of oxic mineralisation
                   rNitri     = 0.0000002 , # mol-N/(kg*d)  maximal rate of nitrification 
                   rPP        = 0.0000006 , # mol-N/(kg*d)  maximal rate of primary production
                   
                   ksSumNH4   = 0.000001  , # mol-N/kg
                  
                   D          = 0.1       , #   1/d            (dispersive) transport coefficient
                   
                   O2_io      = 0.000296  , # mol/kg-soln 
                   NO3_io     = 0.000035  , # mol/kg-soln 
                   SumNH4_io  = 0.000008  , # mol/kg-soln 
                   SumCO2_io  = 0.002320  , # mol/kg-soln 
                   TA_io      = 0.002435  , # mol/kg-soln 
                   
                   C_Nratio     = 8       , # mol C/mol N     C:N ratio of organic matter
                   
                   a           = 30       , # timestep from which PP begins     
                   b           = 50       , # timestep where PP shuts off again
                   
                   modeltime   = 100        # duration of the model
                   )
@ 

And a model function is defined. Again, an object of class \textit{aquaenv} is created in each timestep and respective elements are used.

<<fig=FALSE, echo=TRUE>>=
boxmodel <- function(timestep, currentstate, parameters)
{
  with (
        as.list(c(currentstate,parameters)),
        {        
          ae <- aquaenv(Tc=Tc, S=S, SumCO2=SumCO2, SumNH4=SumNH4, TA=TA, dsa=TRUE)
                                    
          ECO2    <- k * (ae$CO2_sat - ae$CO2)            
          EO2     <- k * (ae$O2_sat  - O2)                    
        
          RNit      <- rNitri 
          ROx       <- rOx 
        
          if ((timestep > a) && (timestep < b))
            {
              RPP <- rPP * (SumNH4/(ksSumNH4 + SumNH4))
            }
          else
            {
              RPP <- 0
            }
          
          dO2     <- EO2 - C_Nratio*ROx - 2*RNit + C_Nratio*RPP
          dNO3    <- RNit
          
          dSumCO2 <- ECO2 + C_Nratio*ROx - C_Nratio*RPP
          dSumNH4 <- ROx  - RNit - RPP

          dTA     <- ROx - 2*RNit - RPP
          
          # The DSA pH
          dH    <- (dTA - (dSumCO2*ae$dTAdSumCO2 + dSumNH4*ae$dTAdSumNH4))/ae$dTAdH
          DSApH <- -log10(H)

          # The DSA pH using pH dependent fractional stoichiometry (= using partitioning coefficients)
          rhoHECO2 <- ae$c2 + 2*ae$c3
          rhoHRNit <- 1 + ae$n1
          rhoHROx  <- C_Nratio * (ae$c2 + 2*ae$c3) - ae$n1
          rhoHRPP  <- -(C_Nratio * (ae$c2 + 2*ae$c3)) + ae$n1
          
          dH_ECO2  <- rhoHECO2*ECO2/(-ae$dTAdH)
          dH_RNit  <- rhoHRNit*RNit/(-ae$dTAdH)
          dH_ROx   <- rhoHROx*ROx  /(-ae$dTAdH)
          dH_RPP   <- rhoHRPP*RPP  /(-ae$dTAdH)

          dH_stoich   <- dH_ECO2 + dH_RNit + dH_ROx + dH_RPP
          DSAstoichpH <- -log10(H_stoich)       

          ratesofchanges <- c(dO2, dNO3, dSumNH4, dSumCO2, dTA, dH, dH_stoich)
          processrates   <- c(ECO2=ECO2, EO2=EO2, RNit=RNit, ROx=ROx, RPP=RPP)
          DSA            <- c(DSApH=DSApH, rhoHECO2=rhoHECO2, rhoHRNit=rhoHRNit, rhoHROx=rhoHROx,
                              rhoHRPP=rhoHRPP, dH_ECO2=dH_ECO2, dH_RNit=dH_RNit, dH_ROx=dH_ROx, dH_RPP=dH_RPP, DSAstoichpH=DSAstoichpH)
          
          return(list(ratesofchanges, list(processrates, DSA, ae)))
        }
        )
}
@ 

The model is solved
<<fig=FALSE, echo=TRUE>>=
with (as.list(parameters),
      {
        H_init       <<- 10^(-(aquaenv(Tc=Tc, S=S, SumCO2=SumCO2_io, SumNH4=SumNH4_io, TA=TA_io, speciation=FALSE)$pH))
        initialstate <<- c(O2=O2_io, NO3=NO3_io, SumNH4=SumNH4_io, SumCO2=SumCO2_io, TA=TA_io, H=H_init, H_stoich=H_init)
        times        <<- c(0:modeltime)
        output       <<- as.data.frame(vode(initialstate, times, boxmodel, parameters, hmax=1))[-1,]        
      })
@ 

and output can be plotted. Again using \texttt{plot.aquaenv}. Note that here the parameter \texttt{what} is used.

<<fig=TRUE, echo=TRUE, width=13, height=10>>=
what <- c("SumCO2", "TA", "SumNH4", "NO3", "ECO2", "EO2", "RNit", "ROx", "RPP", "dTAdH", "dTAdSumCO2", "dTAdSumNH4", "c1", "c2", "c3", "n1", "n2",
          "rhoHECO2", "rhoHRNit", "rhoHROx", "rhoHRPP", "dH_ECO2", "dH_RNit", "dH_ROx", "dH_RPP",
          "pH", "DSApH", "DSAstoichpH")
plot(aquaenv(ae=output, from.data.frame=TRUE), xval=output$time, what=what,  xlab="time/d", mfrow=c(6,5), size=c(20,13), newdevice=FALSE) 
@ 

Here, the cumulative plotting functionality of  \texttt{plot.aquaenv} can be employed as well to visualize the influences of the different kinetically
modelled processes on $\rm [H^+]$.
<<fig=TRUE, echo=TRUE, width=10, height=5>>=
what <- c("dH_ECO2", "dH_RNit", "dH_ROx", "dH_RPP")
plot(aquaenv(ae=output, from.data.frame=TRUE), xval=output$time, what=what, xlab="time/d", size=c(7,5), ylab="mol-H/(kg-soln*d)", legendposition="bottomright", cumulative=TRUE, newdevice=FALSE) 
@  


Finally, the pH values calculated with the three different methods can be plotted in one single graph to see if they are identical, i.e. the three 
methods of pH calculation are consistent with each other

<<fig=TRUE, echo=TRUE, width=10, height=5>>=
ylim <- range(output$DSApH, output$DSAstoichpH, output$pH)
plot(output$DSApH, ylim=ylim, type="l", xlab="time/d", ylab="pH (free scale)")
par(new=TRUE)
plot(output$DSApH, ylim=ylim, type="l", col="red", xlab="", ylab="")
par(new=TRUE)
plot(output$DSAstoichpH, ylim=ylim, type="l", col="blue", xlab="", ylab="")
@







<<fig=FALSE, echo=FALSE>>=
graphics.off()
@ 


\appendix

\section{References for the elements of an object of class \textit{aquaenv}} \label{app: references}
\begin{footnotesize}
\begin{longtable}{p{.15\textwidth}|p{.9\textwidth}}
\textbf{element}& \textbf{references} \\ \hline 
Cl          & \cite[ chapter 5, p. 11]{DOE1994}, and \cite[p. 100, footnote 3]{Zeebe2001}\\
I           & \cite[chapter 5, p. 13, 15]{DOE1994},  \cite[ p.12]{Zeebe2001}, and \cite[ p.257]{Roy1993b}. 
Note that the approximation I/(mol/kg-solution) $\approx$ 0.0199201 \; S is given in \cite[  p. 428.]{Millero1982}.
This relationship converted into mol/kg-$\rm H_2O$ and the last digits adjusted (from 0.0199201 to 0.019924) results in the formula used here.\\
density     & \cite{Millero1981} and \cite[chapter 5, p. 6f]{DOE1994}.\\
SumBr, ClConc, Na, Mg, Ca, K, Sr & \cite[ chapter 5, p.11]{DOE1994}\\    
molal2molin & \cite[ p.257]{Roy1993b}, and  \cite[chapter 5, p. 15]{DOE1994}\\
free2tot, tot2free  & \cite[p.2302]{Dickson1984}, \cite[ chapter 4, p.16]{DOE1994}, \cite[p.57, 261]{Zeebe2001}\\
free2sws, tot2sws, sws2free, sws2tot &  \cite[p.2303]{Dickson1984}, \cite[ p.57]{Zeebe2001}\\
K0\_CO2     & \cite{Weiss1974}, \cite[chapter 5, p. 13]{DOE1994} (here it is stated that the unit is mol/(kg-solution*atm)), \cite[ p.663]{Millero1995}, \cite[ p.257]{Zeebe2001}\\
K0\_O2      & derived from  a formula for the oxygen saturation concentration in ml-$\rm O_2$/kg-solution by \cite{Weiss1970} using the first virial coefficient
of oxygen \citep[][p. 41, 1029]{Atkins1996} and the atmospheric oxygen fugacity \citep{Williams2004}\\
K\_W        & \cite[p.670]{Millero1995} (\textbf{original reference}, but slightly different formula for seawater pH), \cite[chapter 5, p. 18]{DOE1994} (NOT the original reference! \cite{DOE1994} cites in an update from 1997 \cite{Millero1995}! 
However the version of the formula used here is the one converted to total pH scale given in \cite{DOE1994}), and \cite[p. 258]{Zeebe2001}. Constant type (stoichiometric), 
pH scale (total, converted to free here) , and 
concentration unit (mol/kg-solution squared): \cite[chapter 5, p. 12,18]{DOE1994}, pH scale also in \cite[p. 258]{Zeebe2001}.\\
K\_HSO4     & \cite[chapter 5 page 13]{DOE1994}, \cite[p. 260]{Zeebe2001}, \cite{Dickson1990a} (original reference). Constant type (stoichiometric), pH scale (free) , and 
concentration unit (mol/kg-$\rm H_2O$ converted to mol/kg-solution here): \cite[chapter 5, p. 13]{DOE1994}.\\
K\_HF       & \cite[p. 91]{Dickson1979} (original reference), \cite[c. 5, p. 15]{DOE1994}, \cite[p. 257]{Roy1993b}, \cite[p. 1783]{Dickson1987}, \cite[p. 664]{Millero1995}, \cite[p. 260]{Zeebe2001} 
(converted to molinty and total scale).  Constant type (stoichiometric), pH scale (free) , and 
concentration unit (mol/kg-$\rm H_2O$ converted to mol/kg-solution here): \cite[chapter 5, p. 15, 16]{DOE1994}. \\
K\_CO2, K\_HCO3  & \cite[p. 254]{Roy1993b} (original reference), \cite[chapter 5, p.14]{DOE1994} (in a version converted to mol/kg-$\rm H_2O$), \cite[p. 664]{Millero1995}, \cite[p. 255]{Zeebe2001}.
Constant type (stoichiometric) and  concentration unit (mol/kg-$\rm H_2O$ converted to mol/kg-solution here): \cite[chapter 5, p. 14, 15]{DOE1994}, pH scale (total, converted to free here): 
In \cite[chapter 5, p. 12]{DOE1994} the total scale is stated for the formula for high salinities and thus can be inferred for the formula for low salinities. 
The scale is also indirectly stated for both formulations in the original reference \cite{Roy1993b}. Note that in \cite{Roy1993b} a function for
pure water \citep{Millero1979} is cited and a function for seawater is derived. In \cite{Millero1995} it is stated that for S$<$5 the fresh water formula
of \citep{Millero1979} should be used and for S$>=$5 the seawater formula derived in \cite{Roy1993b}. However, both formulations do not always 
intersect at S=5. The true intersection with respect to salinity S is a function of temperature Tk. Here, we first calculate this intersection by
numerical root finding and then decide which formulation to use. This practise results in a continuous function with respect to S.
(Note that \cite{Millero1979} is restated wrongly in \cite{Roy1993b}: one of the numerical values for the function for $\rm K^*_{CO_2}$ is given as 310.48919, but correct is 2310.48919. However, in 
\cite{Millero1995} this value is stated correctly.) \\
K\_BOH3     & \cite[p. 763]{Dickson1990} (original, but mol/kg-$\rm H_2O$ version), \cite[ch. 5, p. 14]{DOE1994}, \cite[p. 262]{Zeebe2001}, \cite[p.669]{Millero1995} (mol/kg-$\rm H_2O$ version) , agrees with data in \cite{Roy1993a}.
Constant type (stoichiometric) and  concentration unit (mol/kg-solution): \cite[chapter 5, p. 14]{DOE1994}, pH scale (total): \cite[chapter 5, p. 12]{DOE1994} and \cite[p.263]{Zeebe2001}.\\
K\_NH4      & \cite{Millero1995a} (original reference), \cite[p.671]{Millero1995}. Constant type (stoichiometric) and concentration unit (mol/kg-solution): \cite[p.671]{Millero1995}, pH scale (seawater, converted to free here):  
\cite{Lewis1998} (in corrections of \cite{Millero1995}).\\
K\_H2S      & \cite{Millero1988} (original reference), \cite[p.671]{Millero1995}. Constant type (stoichiometric) and concentration unit (mol/kg-solution): \cite[p.671]{Millero1995}, pH scale (seawater, converted to free here):  
\cite{Lewis1998} (in corrections of \cite{Millero1995}).\\
K\_H3PO4, K\_H2PO4, K\_HPO4 & \cite[p.670]{Millero1995} (original reference, but formula for seawater scale pH), \cite[ch. 5, p 16,17]{DOE1994}, agrees with data in \cite{Dickson1979a}.
 Constant type (stoichiometric), concentration unit (mol/kg-solution), and pH scale (total, converted to free here): \cite[chapter 5, p. 12, 16, 17]{DOE1994}.\\
K\_SiOH4    & \cite{Millero1988} (original reference), \cite[chapter 5, p 17]{DOE1994}, \cite[p.671]{Millero1995} (formula for seawater scale pH)
 Constant type (stoichiometric), concentration unit (mol/kg-$\rm H_2O$ converted to mol/kg-solution here by omitting the conversion summand ln(1-0.001005 S)), and pH scale (total, converted to free here): \cite[chapter 5, p. 12, 17]{DOE1994}.\\
K\_SiOOH3   & \cite{Wischmeyer2003} (original reference), corrected due to personal communication with Dieter Wolf-Gladrow (one of the authors). The corrected version can be obtained from either Dieter Wolf-Gladrow or Andreas F Hofmann 
(a.hofmann@nioo.knaw.nl).  Constant type (stoichiometric), concentration unit (mol/kg-solution), and pH scale (total, converted to free here): \cite{Wischmeyer2003}.\\
K\_HNO2     & Constant value, not a function of temperature and salinity! Obtained as a hybrid pk value (featuring the activity of the proton but the concentration of other species (see \cite{Zeebe2001} for a treatment of different types of
equilibrium constants) in molar concentration (mol/l) on the NBS pH scale \citep{Durst1975} from \cite{Riordan2005}. Used as an approximation for the stoichiometric $\rm K^*_{\rm HNO_2}$ in mol/kg-solution on the free proton pH scale here.\\
K\_H2SO4    & Constant value, not a function of temperature and salinity! Obtained as a standard pK value from \cite[p. 1045]{Atkins1996}. Used as an approximation for the stoichiometric $\rm K^*_{\rm H_2SO_4}$ in mol/kg-solution on the free proton pH scale here.\\
K\_HS       & Constant value, not a function of temperature and salinity! Obtained as a standard pK value from \cite[p. 1045]{Atkins1996}. Used as an approximation for the stoichiometric $\rm K^*_{\rm Hs^-}$ in mol/kg-solution on the free proton pH scale here.\\
Ksp\_calcite, Ksp\_aragonite  & \cite{Mucci1983} (original reference), \cite{Boudreau1996}. Note that in there are errors in \cite{Boudreau1996}: $b_0$ for calcite is not 0.7712 but 0.77712 and $b_1$ for 
aragonite is not 0.001727 but 0.0017276.\\
pH  & As given in \cite{Dickson1984}, p. 2303 (use of "m") and \cite{Dickson1979a}, p. 91f all concentrations appearing in the definition 
of the total and the seawater pH scale are \textbf{molal} (mol/kg-$\rm H_2O$) concentrations. But in \cite{Roy1993b}, p. 257  and in \cite{DOE1994}, 
chapter 4, SOP 6, p. 1 it is stated, that concentrations for the seawater and total pH scale are in mol/kg-solution.
To be consistent with \cite{DOE1994} \textbf{molin} concentrations (mol/kg-solution) are chosen for calculating the pH.\\
revelle     & \cite[p.73]{Zeebe2001}\\    
dTAdKdKdS, dTAdKdKdT, dTAdKdKdd, dTAdKdKdSumH2SO4, dTAdKdKdSumHF & \cite{Hofmann2008b}\\
\end{longtable}
\end{footnotesize}
The values for K\_W, K\_HSO4, K\_HF, K\_CO2, K\_HCO3, K\_BOH3,  K\_NH4,  K\_H2S,  K\_H3PO4, K\_H2PO4, K\_HPO4, K\_SiOH4, K\_SiOOH3,  Ksp\_calcite, Ksp\_aragonite obtained as functions of 
salinity S and temperature Tc from the above references are pressure corrected using the given depth d and the calculated hydrostatic pressure hydroP according to \cite{Millero1995} 
with corrections by \cite{Lewis1998}.\\

\noindent
In general it is to be said that all corrections from \cite{Lewis1998} have been applied.


\bibliography{AquaEnv}
\end{document}
